리포지토리 만들고 , 서비스 만들고 , 테스트 케이스 만들고

실제로 돌려보는 회원 객체 다이어그램 을 돌려본다.

객체 다이어그램은 동적이다 실제로 프로그램이 떠야 선택이 되기 때문이다.
객체 다이어그램은 실제 구현되어진 상태의 최종 상태의 다이어그램이다.

회원 도메인 설계의 문제점

- 이 코드의 설계상 문제는 무엇일까요?
- 다른 저장소로 변경할 때 OCP 원칙을 잘 준수할까요?
- DIP 를 잘 지키고 있을까요?
- 의존관계가 인터페이스 뿐만 아니라 구현까지 모두 의존하는 문제점이 있음


MemberRepository memberRepository = new MemoryMemberRepository();
이것은 MemberService 입장에서 MemberRepository 인터페이스도 의존하고 MemoryMemberRepository 구현체도 의존을 하게 된다.
둘다 의존을 하게 되어서 나중에 변경을 할때 문제가 된다. 이게 DIP 를 위반하고 있는것이다.





